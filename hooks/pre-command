#!/bin/bash
set -euo pipefail

# Source the plugin library
# shellcheck source=lib/plugin.bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../lib/plugin.bash"

echo "üîê ArgoCD Plugin: Checking for secret management configuration..."

inject_secret_steps() {
    local needs_secrets=false
    local pipeline_yaml="steps:"
    
    # Parse ArgoCD configuration for secret patterns
    local server_config
    local username_config
    local password_config
    local token_config
    
    server_config=$(plugin_read_config ARGOCD_SERVER "")
    username_config=$(plugin_read_config ARGOCD_USERNAME "")
    password_config=$(plugin_read_config ARGOCD_PASSWORD "")
    token_config=$(plugin_read_config ARGOCD_TOKEN "")
    
    echo "üìã Analyzing secret configuration patterns..."
    
    # Vault Secrets Plugin
    if [[ "$server_config" =~ ^vault:(.*) ]]; then
        echo "üè¶ Detected Vault secret for ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Server from Vault'
    plugins:
      - vault-secrets#v2.2.1:
          server: \${VAULT_ADDR}
          path: ${BASH_REMATCH[1]}
          auth:
            method: \${VAULT_AUTH_METHOD:-aws}
            aws-role-name: \${VAULT_AWS_ROLE:-}"
        needs_secrets=true
    fi
    
    if [[ "$username_config" =~ ^vault:(.*) ]]; then
        echo "üè¶ Detected Vault secret for ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Username from Vault'
    plugins:
      - vault-secrets#v2.2.1:
          server: \${VAULT_ADDR}
          path: ${BASH_REMATCH[1]}
          auth:
            method: \${VAULT_AUTH_METHOD:-aws}
            aws-role-name: \${VAULT_AWS_ROLE:-}"
        needs_secrets=true
    fi
    
    if [[ "$password_config" =~ ^vault:(.*) ]]; then
        echo "üè¶ Detected Vault secret for ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Password from Vault'
    plugins:
      - vault-secrets#v2.2.1:
          server: \${VAULT_ADDR}
          path: ${BASH_REMATCH[1]}
          auth:
            method: \${VAULT_AUTH_METHOD:-aws}
            aws-role-name: \${VAULT_AWS_ROLE:-}"
        needs_secrets=true
    fi
    
    if [[ "$token_config" =~ ^vault:(.*) ]]; then
        echo "üè¶ Detected Vault secret for ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Token from Vault'
    plugins:
      - vault-secrets#v2.2.1:
          server: \${VAULT_ADDR}
          path: ${BASH_REMATCH[1]}
          auth:
            method: \${VAULT_AUTH_METHOD:-aws}
            aws-role-name: \${VAULT_AWS_ROLE:-}"
        needs_secrets=true
    fi
    
    # AWS SSM Plugin
    if [[ "$server_config" =~ ^aws-ssm:(.*) ]]; then
        echo "‚òÅÔ∏è Detected AWS SSM parameter for ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Server from AWS SSM'
    plugins:
      - aws-ssm#v1.0.0:
          parameters:
            ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$username_config" =~ ^aws-ssm:(.*) ]]; then
        echo "‚òÅÔ∏è Detected AWS SSM parameter for ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Username from AWS SSM'
    plugins:
      - aws-ssm#v1.0.0:
          parameters:
            ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$password_config" =~ ^aws-ssm:(.*) ]]; then
        echo "‚òÅÔ∏è Detected AWS SSM parameter for ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Password from AWS SSM'
    plugins:
      - aws-ssm#v1.0.0:
          parameters:
            ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$token_config" =~ ^aws-ssm:(.*) ]]; then
        echo "‚òÅÔ∏è Detected AWS SSM parameter for ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Token from AWS SSM'
    plugins:
      - aws-ssm#v1.0.0:
          parameters:
            ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    # AWS Secrets Manager Plugin
    if [[ "$server_config" =~ ^aws-sm:(.*) ]]; then
        echo "üîí Detected AWS Secrets Manager secret for ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Server from AWS Secrets Manager'
    plugins:
      - aws-sm#v1.0.0:
          secrets:
            - name: ARGOCD_SERVER
              key: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$username_config" =~ ^aws-sm:(.*) ]]; then
        echo "üîí Detected AWS Secrets Manager secret for ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Username from AWS Secrets Manager'
    plugins:
      - aws-sm#v1.0.0:
          secrets:
            - name: ARGOCD_USERNAME
              key: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$password_config" =~ ^aws-sm:(.*) ]]; then
        echo "üîí Detected AWS Secrets Manager secret for ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Password from AWS Secrets Manager'
    plugins:
      - aws-sm#v1.0.0:
          secrets:
            - name: ARGOCD_PASSWORD
              key: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$token_config" =~ ^aws-sm:(.*) ]]; then
        echo "üîí Detected AWS Secrets Manager secret for ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Token from AWS Secrets Manager'
    plugins:
      - aws-sm#v1.0.0:
          secrets:
            - name: ARGOCD_TOKEN
              key: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    # Buildkite Secrets Plugin
    if [[ "$server_config" =~ ^bk-secrets:(.*) ]]; then
        echo "üèóÔ∏è Detected Buildkite secret for ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Server from Buildkite Secrets'
    plugins:
      - secrets#v1.0.0:
          variables:
            ARGOCD_SERVER: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$username_config" =~ ^bk-secrets:(.*) ]]; then
        echo "üèóÔ∏è Detected Buildkite secret for ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Username from Buildkite Secrets'
    plugins:
      - secrets#v1.0.0:
          variables:
            ARGOCD_USERNAME: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$password_config" =~ ^bk-secrets:(.*) ]]; then
        echo "üèóÔ∏è Detected Buildkite secret for ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Password from Buildkite Secrets'
    plugins:
      - secrets#v1.0.0:
          variables:
            ARGOCD_PASSWORD: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    if [[ "$token_config" =~ ^bk-secrets:(.*) ]]; then
        echo "üèóÔ∏è Detected Buildkite secret for ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        pipeline_yaml+="
  - label: 'üîê Fetch ArgoCD Token from Buildkite Secrets'
    plugins:
      - secrets#v1.0.0:
          variables:
            ARGOCD_TOKEN: ${BASH_REMATCH[1]}"
        needs_secrets=true
    fi
    
    # Reject insecure configurations
    if [[ -n "$server_config" && ! "$server_config" =~ ^(vault|aws-ssm|aws-sm|bk-secrets): ]]; then
        echo "‚ö†Ô∏è ARGOCD_SERVER should use secure secret management"
        echo "   Supported: vault:, aws-ssm:, aws-sm:, bk-secrets:"
        export ARGOCD_SERVER="$server_config"  # Allow server URL as it's typically not secret
    fi
    
    if [[ -n "$username_config" && ! "$username_config" =~ ^(vault|aws-ssm|aws-sm|bk-secrets): ]]; then
        echo "‚ö†Ô∏è ARGOCD_USERNAME should use secure secret management"
        echo "   Supported: vault:, aws-ssm:, aws-sm:, bk-secrets:"
        export ARGOCD_USERNAME="$username_config"  # Allow for backward compatibility
    fi
    
    if [[ -n "$password_config" && ! "$password_config" =~ ^(vault|aws-ssm|aws-sm|bk-secrets): ]]; then
        echo "‚ùå Error: ARGOCD_PASSWORD must use secure secret management"
        echo "   Supported: vault:, aws-ssm:, aws-sm:, bk-secrets:"
        echo "   Example: argocd_password: 'vault:secret/argocd/password'"
        exit 1
    fi
    
    if [[ -n "$token_config" && ! "$token_config" =~ ^(vault|aws-ssm|aws-sm|bk-secrets): ]]; then
        echo "‚ùå Error: ARGOCD_TOKEN must use secure secret management"
        echo "   Supported: vault:, aws-ssm:, aws-sm:, bk-secrets:"
        echo "   Example: argocd_token: 'vault:secret/argocd/token'"
        exit 1
    fi
    
    # Inject secret-fetching steps if needed
    if [[ "$needs_secrets" == "true" ]]; then
        echo "üöÄ Injecting secret-fetching pipeline steps..."
        echo "$pipeline_yaml" | buildkite-agent pipeline upload
        echo "‚úÖ Secret-fetching steps injected successfully"
        echo "‚è≥ Secrets will be available for the main ArgoCD plugin execution"
    else
        echo "‚ÑπÔ∏è No secret management patterns detected - using direct configuration"
    fi
}

# Execute secret injection logic
inject_secret_steps

echo "üéØ ArgoCD Plugin pre-command hook completed"
